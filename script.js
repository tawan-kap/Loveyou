// ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å (25 ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô 2025, UTC+07:00)
const startDate = new Date('2025-04-25T00:00:00+07:00');
const loveMessages = [
    "‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ üíï",
    "‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏à‡∏ü‡∏π‡∏™‡∏∏‡∏î‡πÜ ü•∞",
    "‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏â‡∏±‡∏ô ‚ú®",
    "‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡∏±‡∏ö‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç üíñ",
    "‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ! üéâ"
];
const images = [
    'https://ibb.co/YBXtyxgc',
    'https://ibb.co/dsyVR9wz',
    'https://ibb.co/dwRRxYxK',
    'https://ibb.co/Cy79Gt6',
    'https://ibb.co/mFShL8CD'
];
let currentImageIndex = 0;
let currentTheme = 0;
const themes = [
    ['#ff9a9e', '#fad0c4', '#a2cffe', '#ff9a9e'],
    ['#ff6f91', '#ffcccb', '#80deea', '#ff6f91'],
    ['#f06292', '#e1bee7', '#81d4fa', '#f06292']
];

// ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å
const correctUsername = 'name';
const correctPassword = 'tawan';

function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    if (username === correctUsername && password === correctPassword) {
        localStorage.setItem('loggedIn', 'true');
        document.getElementById('login-form').style.display = 'none';
        document.getElementById('main-content').style.display = 'block';
        triggerConfetti();
    } else {
        document.getElementById('login-error').style.display = 'block';
    }
}

// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
if (localStorage.getItem('loggedIn') === 'true') {
    document.getElementById('login-form').style.display = 'none';
    document.getElementById('main-content').style.display = 'block';
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DOM
function calculateTimePassed() {
    const now = new Date();
    const diffMs = now - startDate;

    if (diffMs < 0) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        document.getElementById('anniversary-text').innerHTML = 
            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°! ‡∏£‡∏≠‡∏ñ‡∏∂‡∏á 25 ‡πÄ‡∏°.‡∏¢. 2025 ‡∏ô‡πâ‡∏≤ üíï';
        document.getElementById('countdown').innerText = '';
        document.getElementById('details').innerHTML = '';
        return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô, ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, ‡∏ô‡∏≤‡∏ó‡∏µ, ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor(diffMs / (1000 * 60));
    const seconds = Math.floor(diffMs / 1000);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏µ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 25
    let years = now.getFullYear() - startDate.getFullYear();
    let months = now.getMonth() - startDate.getMonth();
    let remainingDays = now.getDate() - startDate.getDate();

    if (remainingDays < 0) {
        months--;
        const prevMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        remainingDays += prevMonth.getDate();
    }
    if (months < 0) {
        years--;
        months += 12;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö
    document.getElementById('anniversary-text').innerHTML = 
        `${years} ‡∏õ‡∏µ ${months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${remainingDays} ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ü•∞üíñ (${days} ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß üéà) üéâ`;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï <div id="details">
    updateDetails(days, hours, minutes, seconds);

    // ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 25)
    const nextAnniversary = new Date(now.getFullYear(), now.getMonth(), 25);
    if (now.getDate() >= 25) {
        nextAnniversary.setMonth(now.getMonth() + 1);
    }
    if (nextAnniversary.getMonth() === 12) {
        nextAnniversary.setFullYear(nextAnniversary.getFullYear() + 1);
        nextAnniversary.setMonth(0);
    }
    const countdownMs = nextAnniversary - now;
    const countdownDays = Math.floor(countdownMs / (1000 * 60 * 60 * 24));
    const countdownHours = Math.floor((countdownMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const countdownMinutes = Math.floor((countdownMs % (1000 * 60 * 60)) / (1000 * 60));

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    const nextDateStr = nextAnniversary.toLocaleDateString('th-TH', { 
        day: '2-digit', 
        month: 'long', 
        year: 'numeric' 
    });
    document.getElementById('countdown').innerText = 
        `${countdownDays} ‡∏ß‡∏±‡∏ô ${countdownHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${countdownMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ñ‡∏∂‡∏á ${nextDateStr})`;
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï <div id="details">
function updateDetails(days, hours, minutes, seconds) {
    const details = document.getElementById('details');
    details.innerHTML = `
        <h2>üíñ‚ú® ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‚ú®üíñ</h2>
        <p>‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å <strong>25 April 2025 (UTC+07:00)</strong> ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ üéà</p>
        <p>‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß: <strong>${days}</strong> ‡∏ß‡∏±‡∏ô üéÇ</p>
        <p>‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á: <strong>${hours}</strong> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚è±Ô∏è</p>
        <p>‡∏ô‡∏≤‡∏ó‡∏µ: <strong>${minutes}</strong> ‡∏ô‡∏≤‡∏ó‡∏µ ‚è≤Ô∏è</p>
        <p>‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ: <strong>${seconds}</strong> ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚ú®</p>
    `;
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏™‡∏∏‡πà‡∏°
function randomLoveMessage() {
    const message = loveMessages[Math.floor(Math.random() * loveMessages.length)];
    document.getElementById('love-message').innerText = message;
    triggerConfetti();
}

// AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ü‡∏£‡∏µ
const loveWords = ['‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠', '‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á', '‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏à', '‡∏Ñ‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©', '‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ', '‡∏´‡∏±‡∏ß‡πÉ‡∏à', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', '‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á', '‡πÇ‡∏•‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö'];
const lovePhrases = ['‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏î', '‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ', '‡∏¢‡∏¥‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°', '‡∏™‡∏∏‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô'];

function generateAILoveMessage() {
    const randomWord1 = loveWords[Math.floor(Math.random() * loveWords.length)];
    const randomWord2 = loveWords[Math.floor(Math.random() * loveWords.length)];
    const randomPhrase = lovePhrases[Math.floor(Math.random() * lovePhrases.length)];
    const aiMessage = `${randomWord1}‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠${randomWord2} ${randomPhrase}! üíñü•∞`;
    document.getElementById('love-message').innerText = aiMessage;
    saveLoveMessage(aiMessage);
    triggerConfetti();
}

// ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏£‡∏±‡∏Å
function playLoveSong() {
    const audio = document.getElementById('love-song');
    audio.play();
    triggerConfetti();
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏û‡∏•‡∏á
function changeSong() {
    const audio = document.getElementById('love-song');
    const selector = document.getElementById('song-selector');
    audio.src = selector.value;
    audio.play();
}

// ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
function showDetails() {
    const details = document.getElementById('details');
    details.style.display = details.style.display === 'block' ? 'none' : 'block';
}

// ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ
function toggleGallery() {
    const gallery = document.getElementById('gallery');
    gallery.style.display = gallery.style.display === 'block' ? 'none' : 'block';
    if (gallery.style.display === 'block') {
        updateGallery();
    }
}

function updateGallery() {
    const galleryImages = document.getElementById('gallery-images');
    galleryImages.innerHTML = images.map((src, index) => 
        `<img src="${src}" alt="‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å ${index + 1}" class="${index === currentImageIndex ? 'active' : ''}">`
    ).join('');
}

function prevImage() {
    currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
    updateGallery();
}

function nextImage() {
    currentImageIndex = (currentImageIndex + 1) % images.length;
    updateGallery();
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°‡∏™‡∏µ
function toggleTheme() {
    currentTheme = (currentTheme + 1) % themes.length;
    document.body.style.background = `linear-gradient(135deg, ${themes[currentTheme].join(', ')})`;
    document.body.style.backgroundSize = '400% 400%';
    triggerConfetti();
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å
function addLoveMessage() {
    const form = document.getElementById('custom-message-form');
    form.style.display = form.style.display === 'block' ? 'none' : 'block';
}

function saveLoveMessage(message) {
    const input = document.getElementById('new-message');
    const newMessage = message || input.value.trim();
    if (newMessage) {
        loveMessages.push(newMessage);
        localStorage.setItem('loveMessages', JSON.stringify(loveMessages));
        const memoryList = document.getElementById('memory-list');
        const memoryDiv = document.createElement('div');
        memoryDiv.innerText = newMessage;
        memoryList.appendChild(memoryDiv);
        input.value = '';
        document.getElementById('custom-message-form').style.display = 'none';
        triggerConfetti();
    }
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥
function loadMemories() {
    const savedMessages = JSON.parse(localStorage.getItem('loveMessages')) || loveMessages;
    loveMessages.length = 0;
    loveMessages.push(...savedMessages);
    const memoryList = document.getElementById('memory-list');
    memoryList.innerHTML = savedMessages.map(msg => `<div>${msg}</div>`).join('');
}

// ‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å
function shareLove() {
    const url = window.location.href;
    navigator.clipboard.writeText(url).then(() => {
        alert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üíñ');
        triggerConfetti();
    });
}

// Easter Egg
function triggerEasterEgg() {
    document.getElementById('love-message').innerText = '‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏û‡∏£‡∏™‡πå! ‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ üòòüíû';
    confetti({
        particleCount: 300,
        spread: 120,
        origin: { y: 0.6 },
        colors: ['#ff4d4d', '#ff9a9e', '#fad0c4', '#a2cffe']
    });
}

// ‡πÄ‡∏Å‡∏°‡∏£‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡πÜ
let score = 0;
let timer = 30;
let gameInterval;
let highScore = localStorage.getItem('highScore') || 0;
document.getElementById('high-score').innerText = highScore;

function startLoveGame() {
    const game = document.getElementById('love-game');
    game.style.display = 'block';
    score = 0;
    timer = 30;
    document.getElementById('game-score').innerText = score;
    document.getElementById('game-timer').innerText = timer;
    gameInterval = setInterval(() => {
        timer--;
        document.getElementById('game-timer').innerText = timer;
        if (timer <= 0) {
            endGame();
        }
    }, 1000);
}

function clickHeart() {
    if (timer > 0) {
        score++;
        document.getElementById('game-score').innerText = score;
        triggerConfetti({ particleCount: 20 });
    }
}

function endGame() {
    clearInterval(gameInterval);
    if (score > highScore) {
        highScore = score;
        localStorage.setItem('highScore', highScore);
        document.getElementById('high-score').innerText = highScore;
        alert(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà: ${highScore} üíñ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà! üéâ`);
        triggerConfetti({ particleCount: 300 });
    } else {
        alert(`‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${score} üíï ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${highScore}`);
    }
}

function resetGame() {
    document.getElementById('love-game').style.display = 'none';
}

// Confetti effect
function triggerConfetti(options = {}) {
    confetti({
        particleCount: options.particleCount || 200,
        spread: options.spread || 100,
        origin: { y: 0.6 },
        colors: ['#ff4d4d', '#ff9a9e', '#fad0c4', '#a2cffe']
    });
}

// Particles.js (‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á)
particlesJS('particles-js', {
    particles: {
        number: { value: 200, density: { enable: true, value_area: 800 } },
        color: { value: ['#ff4d4d', '#ff9a9e', '#fad0c4', '#a2cffe'] },
        shape: { type: ['heart', 'circle', 'star'], stroke: { width: 0 } },
        opacity: { value: 0.8, random: true },
        size: { value: 15, random: true },
        line_linked: { enable: false },
        move: {
            enable: true,
            speed: 4,
            direction: 'none',
            random: true,
            straight: false,
            out_mode: 'out',
            bounce: false
        }
    },
    interactivity: {
        detect_on: 'canvas',
        events: {
            onhover: { enable: true, mode: 'bubble' },
            onclick: { enable: true, mode: 'push' },
            resize: true
        },
        modes: {
            bubble: { distance: 200, size: 20, duration: 2, opacity: 0.8 }
        }
    }
});

// Three.js (‡∏´‡∏±‡∏ß‡πÉ‡∏à 3D)
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.getElementById('three-canvas').appendChild(renderer.domElement);

const geometry = new THREE.SphereGeometry(5, 32, 32);
const material = new THREE.MeshBasicMaterial({ color: 0xff4d4d, wireframe: true });
const heart = new THREE.Mesh(geometry, material);
scene.add(heart);
camera.position.z = 15;

function animate3D() {
    requestAnimationFrame(animate3D);
    heart.rotation.x += 0.01;
    heart.rotation.y += 0.01;
    renderer.render(scene, camera);
}
animate3D();

window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
setInterval(calculateTimePassed, 1000);
calculateTimePassed();
loadMemories();
updateGallery();
